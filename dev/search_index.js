var documenterSearchIndex = {"docs":
[{"location":"ecosystem/#Julia's-Physics-ecosystem-1","page":"Julia's Physics ecosystem","title":"Julia's Physics ecosystem","text":"","category":"section"},{"location":"ecosystem/#","page":"Julia's Physics ecosystem","title":"Julia's Physics ecosystem","text":"JuliaPhysics (a physics organization)","category":"page"},{"location":"ecosystem/#Dealing-with-physical-quantities-1","page":"Julia's Physics ecosystem","title":"Dealing with physical quantities","text":"","category":"section"},{"location":"ecosystem/#","page":"Julia's Physics ecosystem","title":"Julia's Physics ecosystem","text":"JuliaPhysics:\nMeasurements.jl: Error propagation library\nPhysicalConstants: Collection of fundamental physical constants, with physical units and uncertainties\nUnitful.jl: Physical quantities with arbitrary units\nNaturallyUnitful.jl: Facilities for using natural units with Unitful.jl","category":"page"},{"location":"ecosystem/#Differential-equations-1","page":"Julia's Physics ecosystem","title":"Differential equations","text":"","category":"section"},{"location":"ecosystem/#","page":"Julia's Physics ecosystem","title":"Julia's Physics ecosystem","text":"DifferentialEquations.jl: Julia suite for high-performance solvers of differential equations\nDiffEqPhysics.jl: A library for building differential equations arising from physical problems\nDiffEqOperators.jl: Linear operators for discretizations of differential equations\nModelingToolkit.jl: A toolkit for modeling and creating DSLs for Scientific Computing in Julia","category":"page"},{"location":"ecosystem/#TODOS-here-1","page":"Julia's Physics ecosystem","title":"TODOS here","text":"","category":"section"},{"location":"ecosystem/#","page":"Julia's Physics ecosystem","title":"Julia's Physics ecosystem","text":"Short tutorial with common physics problems\nOverview of DiffEqPhysics and FDM with DiffEq\nhow to use ModellingToolkit by @ChrisRackauckas and @HarrisonGrodin if possible...with special reference to constructing systems of diffeq programatically","category":"page"},{"location":"ecosystem/#Dynamical-systems-analysis-1","page":"Julia's Physics ecosystem","title":"Dynamical systems analysis","text":"","category":"section"},{"location":"ecosystem/#","page":"Julia's Physics ecosystem","title":"Julia's Physics ecosystem","text":"JuliaDynamics\nDynamicalSystems.jl: A Julia software library for chaos and nonlinear dynamics\nChaosTools.jl: Tools for the exploration of chaos and nonlinear dynamics\nDelayEmbeddings.jl: Delay coordinates embedding, Datasets and neighborhoods\nPyDSTool.jl: A wrapper for the PyDSTool library","category":"page"},{"location":"ecosystem/#Astronomy-1","page":"Julia's Physics ecosystem","title":"Astronomy","text":"","category":"section"},{"location":"ecosystem/#","page":"Julia's Physics ecosystem","title":"Julia's Physics ecosystem","text":"JuliaAstro","category":"page"},{"location":"ecosystem/#Quantum-mechanics-and-computing-1","page":"Julia's Physics ecosystem","title":"Quantum mechanics and computing","text":"","category":"section"},{"location":"ecosystem/#","page":"Julia's Physics ecosystem","title":"Julia's Physics ecosystem","text":"JuliaQuantum:\nQuDynamics.jl: A JuliaQuantum package for solving dynamical equations in quantum mechanics.\nQuCmp.jl: A JuliaQuantum package for simulations of quantum computers.\nYao.jl: Extensible, Efficient Quantum Algorithm Design for Humans.\nQuantumOptics.jl","category":"page"},{"location":"ecosystem/#Finite-element-analysis-1","page":"Julia's Physics ecosystem","title":"Finite element analysis","text":"","category":"section"},{"location":"ecosystem/#","page":"Julia's Physics ecosystem","title":"Julia's Physics ecosystem","text":"JuAFEM.jl: Finite element toolbox for Julia\nJuliaFEM.jl: Framework for the distributed processing of large Finite Element Models across clusters of computers using simple programming models\nFENiCS.jl: A wrapper for the FEniCS Finite Element library","category":"page"},{"location":"ecosystem/#Solid-state-1","page":"Julia's Physics ecosystem","title":"Solid state","text":"","category":"section"},{"location":"ecosystem/#","page":"Julia's Physics ecosystem","title":"Julia's Physics ecosystem","text":"JuliaAtoms: Atomic physics\nAtomicLevels.jl: A library used to define electronic configurations constructed from electronic orbitals in spherical symmetry.\nAtoms.jl: Data structures for representing atoms in a product space of orbitals and a radial grid. The radial grid can be any implementation of the ContinuumArrays.jl interface.\nEnergyExpressions.jl: A library for setting up the energy expression of a system built up from a set of configurations. At the moment, the implementation is geared towards atomic systems (in that it uses data structures from AtomicLevels.jl), but it is applicable to other systems as well, such as molecules.\nSCF.jl: A library for the solution of integro-differential eigenproblems, in a self-consistent manner.\nAngularMomentumAlgebra.jl: A library for the special case of energy expressions in spherical symmetry.\nAtomicPotentials.jl Provides structures for modelling the atomic nucleus as a potential.\nlibAtoms: Materials-modelling + FEM orientated libraries\nJuLIP: library for Interatomic Potentials\nASE.jl: Julia Bindings for Atomic Simulation Environment\nJuLIPMaterials: collection of Julia tools for materials science\nCarrierCapture.jl: Semi-classical recombination in semiconductors.\nPolaronMobility.jl: Feynman variational path-integral model for the Fr√∂hlich polaron\nCoulombIntegrals.jl: A library that implements the calculation of the Coulombic repulsion between pairs of electrons.\nMatrixFactorizations.jl Wrappers around the solvers from IterativeSolvers.jl that can be used as lazy factorizations.\nPseudoPotentials.jl: Model potentials used to reduces calculation complexity by representing a core of electrons in a mean-field sense.  This can turn a multi-electron problem into an approximate few- or single-electron problem.","category":"page"},{"location":"ecosystem/#Tensors-1","page":"Julia's Physics ecosystem","title":"Tensors","text":"","category":"section"},{"location":"ecosystem/#","page":"Julia's Physics ecosystem","title":"Julia's Physics ecosystem","text":"ITensors.jl: A Julia library for efficient tensor and tensor network calculations\nTensorOperations.jl: Julia package for tensor contractions and related operations\nEinsum.jl: Einstein summation notation in Julia\nThat new Einsum library for more automatic differentiation?","category":"page"},{"location":"ecosystem/#Radiation-detectors-1","page":"Julia's Physics ecosystem","title":"Radiation detectors","text":"","category":"section"},{"location":"ecosystem/#","page":"Julia's Physics ecosystem","title":"Julia's Physics ecosystem","text":"RadiationSpectra.jl: Toolkit for analysis of radiation spectra in Julia\nRadiationDetectorSignals.jl: Data types for signals of radiation detectors\nRadiationDetectorDSP.jl: Digital signal processing for radiation detectors","category":"page"},{"location":"ecosystem/#Plotting-1","page":"Julia's Physics ecosystem","title":"Plotting","text":"","category":"section"},{"location":"ecosystem/#","page":"Julia's Physics ecosystem","title":"Julia's Physics ecosystem","text":"Visualization is one of the most important tools in our toolkit. There are three main plotting packages in Julia:","category":"page"},{"location":"ecosystem/#","page":"Julia's Physics ecosystem","title":"Julia's Physics ecosystem","text":"Plots.jl: Very intuitive and convenient, Plots.jl is a wrapper around several plotting backends.  Plots tries to figure out what you want it to do, not just what you tell it.\nMakie.jl: Built around the idea of fast, interactive plotting utilizing the speed of OpenGL and the GPU (and WebGL now), Makie.jl is a next-generation plotting package which offers superior interactivity and speed.  It's great for building interactive or animated visualzations with minimal overhead, but the time to first plot is a little slow compared to Plots, and it isn't quite as feature-complete. Written in pure Julia.\nPyPlot.jl: A wrapper around the PyPlot interface to the popular Python plotting library matplotlib.","category":"page"},{"location":"#JuliaPhysics-1","page":"JuliaPhysics","title":"JuliaPhysics","text":"","category":"section"},{"location":"#","page":"JuliaPhysics","title":"JuliaPhysics","text":"Welcome to the homepage of JuliaPhysics, a Julia organization for physics-related packages.","category":"page"},{"location":"#","page":"JuliaPhysics","title":"JuliaPhysics","text":"Julia has a large ecosystem built around scientific computing, and in the section Ecosystem we've aimed to give a overview of packages in the ecosystem that can be useful for physical computing.","category":"page"},{"location":"#","page":"JuliaPhysics","title":"JuliaPhysics","text":"JuliaPhysics itself hosts several packages, which are listed here: ######################################## TODO FIXME list packages","category":"page"}]
}
